"""
재귀적 호출이 아닌
단순한 반복문처럼.

작은문제부터 시작해서 최종 큰 문제로 접근하는 방식을
보텀업 방식이라고 한다.
이게 좀더 다이나믹 프로그래밍의 전형적인 형태

흔히 탑다운 방식을 하향식.
또는 메모이제이션 방식

보텀업 방식을 상향식 이라고 표현한다.

그리고 보텀업 방식에서 결과 저장용으로 사용되는 리스트를
DP 테이블
"""

n = 100
pibo_arr = [0]*(n+1)

pibo_arr[1] = 1
pibo_arr[2] = 1

for i in range(3, n+1):
    pibo_arr[i] = pibo_arr[i-1] + pibo_arr[i-2]

print(pibo_arr[6])


"""
메모이제이션은 탑다운 방식에만 국한되는 느낌이고(재귀적)
=> 정확히는 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념.
=> 단순히 저장만 하고 다이나믹 프로그래밍을 안할 수도 있다.

다이나믹 프로그래밍은 보텀업 방식위주의 느낌.
""""""
결론은.

재귀적으로 하기에는(탑다운 방식)
재귀 함수 깊이의 제한이 있을 수 있기 때문에

일반적인 반복문으로 하는 바텀업 방식을 사용하도록 하자.

사실은 sys 라이브러리에 있는
setrecursionlimit() 함수로 재귀 함수 깊이 제한을 완화 할 수는 있긴 하다.
"""
